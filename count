#!/usr/bin/env node

const { argv } = require('yargs')
  .usage('usage: ./$0 <Directory ID> [options]')
  .example('./$0 1ULY8ISgWSOVc0UrzejykVgXfVL_I4r75', 'Get statistics of all files contained in https://drive.google.com/drive/folders/1ULY8ISgWSOVc0UrzejykVgXfVL_I4r75')
  .example('./$0 root -s size -t html -o out.html', 'Obtain the personal disk root directory statistical information, the result is output in HTML table, arranged in reverse order according to the total size, and saved to the out.html file in this directory (if it does not exist, it will be created and overwritten if it exists)')
  .example('./$0 root -s name -t json -o out.json', 'Obtain the personal disk root directory statistical information, the results are output in JSON format, sorted according to the file extension, and saved to the out.json file in this directory')
  .example('./$0 root -t all -o all.json', 'Obtain the personal disk root directory statistical information, output all file information (including folders) in JSON format, and save it to the all.json file in this directory')
  .alias('u', 'update')
  .describe('u', 'Obtain information from online (disregard whether there is local cache)')
  .alias('N', 'not_teamdrive')
  .describe('N', 'If it is not a team disk link, you can add this parameter to improve the interface query efficiency and reduce latency. If you want to count the personal disk and the service account in the ./sa directory does not have the relevant permissions, please make sure to add this parameter to use personal auth information to query')
  .alias('S', 'service_account')
  .describe('S', 'Specify the service account for statistics, provided that the SA json file must be placed in the sa directory')
  .alias('s', 'sort')
  .describe('s', 'Statistical results sorting method, optional value name or size')
  .alias('t', 'type')
  .describe('t', 'Statistics output type, optional value html/json/all, all means output all file json data, it is best to use with -o. If not filled, the command line form will be output by default')
  .alias('o', 'output')
  .describe('o', 'Statistics output file, suitable for use with -t')
  .help('h')
  .alias('h', 'help')

const { count, validate_fid } = require('./src/gd')
const [fid] = argv._
console.warn(fid)
if (validate_fid(fid)) {
  const { update, sort, type, output, not_teamdrive, service_account } = argv
  count({ fid, update, sort, type, output, not_teamdrive, service_account }).catch(console.error)
} else {
  console.warn('Directory ID is missing or malformed')
}
